<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AndroidLayouts">
    <shared>
      <config />
    </shared>
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="NONE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c08a2830-4432-4336-988d-7cc1ebbb876a" name="Changes" comment="feat: Enhance Splash Screen with Gradient Button and Navigation&#10;&#10;- Add a &quot;Get Started&quot; `GradientButton` to `SplashScreen.kt`.&#10;- Implement navigation from `SplashActivity` to `MainActivity` on button click.&#10;- Make `SplashActivity` the launcher activity in `AndroidManifest.xml`.&#10;- Update theme `Theme.LeapTechEventsAndroid` to inherit from `Theme.AppCompat.Light.NoActionBar`.&#10;- Remove `app/build.gradle` and `.env.example` as they are no longer needed.&#10;- Update IntelliJ IDEA project files (`.idea/workspace.xml`, `.idea/deploymentTargetSelector.xml`).&#10;- Remove unused module file `.idea/modules/app/Leap_Tech_Events_-_Android.app.iml`.">
      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/github/ansgrb/leaptechevents_android/presentation/screens/GetStartedScreen.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.bin" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.bin" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/resourceHashesCache.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/resourceHashesCache.bin" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/deploymentTargetSelector.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/deploymentTargetSelector.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/app/build.gradle.kts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/github/ansgrb/leaptechevents_android/MainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/github/ansgrb/leaptechevents_android/MainActivity.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/github/ansgrb/leaptechevents_android/SplashActivity.kt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/github/ansgrb/leaptechevents_android/presentation/components/GradientButton.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/github/ansgrb/leaptechevents_android/presentation/components/GradientButton.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/values/colors.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values/colors.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/values/strings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values/strings.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=LocalEmulator, isTemplate=false, identifier=path=/home/aghthar/.android/avd/Pixel_9_Pro_API_35.avd)]" />
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <task path="$PROJECT_DIR$/app">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Leap Tech Events - Android" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Leap Tech Events - Android" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Leap Tech Events - Android" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
                <item name="other" type="c8890929:TasksNode$1" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Leap Tech Events - Android" type="f1a62948:ProjectNode" />
                <item name="app" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Leap Tech Events - Android" type="f1a62948:ProjectNode" />
                <item name="app" type="2d1252cf:ModuleNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Leap Tech Events - Android" type="f1a62948:ProjectNode" />
                <item name="app" type="2d1252cf:ModuleNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
                <item name="other" type="c8890929:TasksNode$1" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Kotlin File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="main" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="UPDATE_TYPE" value="REBASE" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;ansgrb&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/ansgrb/leaptechevents_android.git&quot;,
    &quot;accountId&quot;: &quot;2b41818e-6919-4e46-8b9c-2d3fc2f05af2&quot;
  },
  &quot;recentNewPullRequestHead&quot;: {
    &quot;server&quot;: {
      &quot;useHttp&quot;: false,
      &quot;host&quot;: &quot;github.com&quot;,
      &quot;port&quot;: null,
      &quot;suffix&quot;: null
    },
    &quot;owner&quot;: &quot;ansgrb&quot;,
    &quot;repository&quot;: &quot;leaptechevents_android&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2yLSUMcDdfagjvsiMmofPLzKZ9A" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Android App.app.executor": "Run",
    "Gradle.LeapTechEventsAndroid [testDebugUnitTest].executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.cidr.known.project.marker": "true",
    "RunOnceActivity.git.unshallow": "true",
    "RunOnceActivity.readMode.enableVisualFormatting": "true",
    "cf.first.check.clang-format": "false",
    "cidr.known.project.marker": "true",
    "git-widget-placeholder": "dev",
    "project.structure.last.edited": "Dependencies",
    "project.structure.proportion": "0.17",
    "project.structure.side.proportion": "0.2",
    "settings.editor.selected.configurable": "build.tools"
  }
}]]></component>
  <component name="RunManager" selected="Android App.app">
    <configuration name="app" type="AndroidRunConfigurationType" factoryName="Android App" activateToolWindowBeforeRun="false">
      <module name="Leap_Tech_Events_-_Android.app" />
      <option name="ANDROID_RUN_CONFIGURATION_SCHEMA_VERSION" value="1" />
      <option name="DEPLOY" value="true" />
      <option name="DEPLOY_APK_FROM_BUNDLE" value="false" />
      <option name="DEPLOY_AS_INSTANT" value="false" />
      <option name="ARTIFACT_NAME" value="" />
      <option name="PM_INSTALL_OPTIONS" value="" />
      <option name="ALL_USERS" value="false" />
      <option name="ALWAYS_INSTALL_WITH_PM" value="false" />
      <option name="ALLOW_ASSUME_VERIFIED" value="false" />
      <option name="CLEAR_APP_STORAGE" value="false" />
      <option name="DYNAMIC_FEATURES_DISABLED_LIST" value="" />
      <option name="ACTIVITY_EXTRA_FLAGS" value="" />
      <option name="MODE" value="default_activity" />
      <option name="RESTORE_ENABLED" value="false" />
      <option name="RESTORE_FILE" value="" />
      <option name="RESTORE_FRESH_INSTALL_ONLY" value="false" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="TARGET_SELECTION_MODE" value="DEVICE_AND_SNAPSHOT_COMBO_BOX" />
      <option name="SELECTED_CLOUD_MATRIX_CONFIGURATION_ID" value="-1" />
      <option name="SELECTED_CLOUD_MATRIX_PROJECT_ID" value="" />
      <option name="DEBUGGER_TYPE" value="Auto" />
      <Auto>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Auto>
      <Hybrid>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Hybrid>
      <Java>
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Java>
      <Native>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Native>
      <Profilers>
        <option name="ADVANCED_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_CPU_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_CPU_PROFILING_CONFIGURATION_NAME" value="Java/Kotlin Method Sample (legacy)" />
        <option name="STARTUP_NATIVE_MEMORY_PROFILING_ENABLED" value="false" />
        <option name="NATIVE_MEMORY_SAMPLE_RATE_BYTES" value="2048" />
      </Profilers>
      <option name="DEEP_LINK" value="" />
      <option name="ACTIVITY" value="" />
      <option name="ACTIVITY_CLASS" value="" />
      <option name="SEARCH_ACTIVITY_IN_GLOBAL_SCOPE" value="false" />
      <option name="SKIP_ACTIVITY_VALIDATION" value="false" />
      <method v="2">
        <option name="Android.Gradle.BeforeRunTask" enabled="true" />
      </method>
    </configuration>
    <configuration name="LeapTechEventsAndroid [testDebugUnitTest]" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value="testDebugUnitTest" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>false</RunAsTest>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Gradle.LeapTechEventsAndroid [testDebugUnitTest]" />
        <item itemvalue="Gradle.LeapTechEventsAndroid [testDebugUnitTest]" />
        <item itemvalue="Gradle.LeapTechEventsAndroid [testDebugUnitTest]" />
        <item itemvalue="Gradle.LeapTechEventsAndroid [testDebugUnitTest]" />
        <item itemvalue="Gradle.LeapTechEventsAndroid [testDebugUnitTest]" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c08a2830-4432-4336-988d-7cc1ebbb876a" name="Changes" comment="" />
      <created>1749612375139</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1749612375139</updated>
    </task>
    <task id="LOCAL-00001" summary=":tada: Initial commit&#10;&#10;- Add basic Android project structure.&#10;- Configure Gradle build scripts and properties.&#10;- Add default .gitignore files.&#10;- Add basic app resources including launcher icons, colors, strings, and themes.&#10;- Add MainActivity with basic Compose UI.&#10;- Add Compose theme and typography definitions.&#10;- Add example unit and instrumented tests.&#10;- Add ProGuard rules.&#10;- Add AndroidManifest.xml.&#10;- Add backup and data extraction rules.&#10;- Add Gradle wrapper.">
      <option name="closed" value="true" />
      <created>1749614614388</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1749614614388</updated>
    </task>
    <task id="LOCAL-00002" summary="feat: Add google-services.json&#10;&#10;- Integrate Firebase services configuration into the Android application.&#10;- The `google-services.json` file is added to the `app/` directory.">
      <option name="closed" value="true" />
      <created>1749614832299</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1749614832299</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: Integrate Hilt and Firebase dependencies&#10;&#10;- Add Hilt for dependency injection.&#10;- Add KSP for code generation.&#10;- Integrate Firebase services: Auth, Firestore, Storage, Messaging, Dynamic Links.&#10;- Add Retrofit and OkHttp for networking.&#10;- Add Kotlinx Serialization and Coroutines.&#10;- Add Coil for image loading.&#10;- Add ML Kit Barcode Scanning for QR code functionality.&#10;- Add Mockito for testing.&#10;- Update">
      <option name="closed" value="true" />
      <created>1749617022562</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1749617022562</updated>
    </task>
    <task id="LOCAL-00004" summary="feat: Initialize project structure&#10;&#10;- Create directory structure for data, domain, presentation, ui, and utils layers.&#10;- Add placeholder files for screens, view models, use cases, models, repositories, navigation, constants, DI modules, and application class.&#10;- Add copyright headers to all newly created Kotlin files.&#10;- Configure DataModule with Firebase providers for Firestore, Auth, and Storage.">
      <option name="closed" value="true" />
      <created>1749619186374</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1749619186374</updated>
    </task>
    <task id="LOCAL-00005" summary="feat: Define data models&#10;&#10;- Create `Event.kt` data class with fields: id, title, date, location, imageUrl, and details.&#10;- Create `Ticket.kt` data class with fields: id, eventId, qrCode, and status.&#10;- Create `User.kt` data class with fields: id, email, and name.">
      <option name="closed" value="true" />
      <created>1749619873150</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1749619873150</updated>
    </task>
    <task id="LOCAL-00006" summary="feat: Define domain layer use cases and repository interfaces&#10;&#10;- Implement use cases for event and ticket operations:&#10;  - `GetEventsUseCase`: Fetches a list of all events.&#10;  - `GetEventDetailsUseCase`: Fetches details for a specific event.&#10;  - `GetTicketsUseCase`: Fetches a list of all tickets.&#10;  - `GetTicketUseCase`: Fetches details for a specific ticket.&#10;  - `BookTicketUseCase`: Books a ticket for an event.&#10;  - `LoginUseCase`: Handles user login.&#10;- Define repository interfaces for data abstraction:&#10;  - `EventRepository`: Defines methods for event data operations, including adding events with optional image URIs.&#10;  - `TicketRepository`: Defines methods for ticket data operations.&#10;  - `UserRepository`: Defines methods for user authentication.&#10;  - `StorageRepository`: Defines methods for image upload and deletion.">
      <option name="closed" value="true" />
      <created>1749620544346</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1749620544346</updated>
    </task>
    <task id="LOCAL-00007" summary="feat: Implement data repository logic&#10;&#10;- Implement `EventRepositoryImpl` for fetching, getting details, and adding events, including image upload via `StorageRepository`.&#10;- Implement `TicketRepositoryImpl` for fetching, getting details, and booking tickets.&#10;- Implement `UserRepositoryImpl` for user login using Firebase Auth.&#10;- Implement `StorageRepositoryImpl` for uploading and deleting images in Firebase Storage.">
      <option name="closed" value="true" />
      <created>1749627703896</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1749627703896</updated>
    </task>
    <task id="LOCAL-00008" summary="feat: Implement repository providers in DataModule&#10;&#10;- Add Hilt providers for `EventRepository`, `TicketRepository`, `UserRepository`, and `StorageRepository` implementations.&#10;- These providers inject the necessary Firebase dependencies (Firestore, Auth, Storage) into the respective repository implementations.">
      <option name="closed" value="true" />
      <created>1749627865002</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1749627865002</updated>
    </task>
    <task id="LOCAL-00009" summary="refactor: Update dependencies and remove unused code&#10;&#10;- Update versions for Kotlin, Compose BOM, Hilt, Firebase services, Coil, Mockito, and other libraries in `libs.versions.toml`.&#10;- Update plugin versions in `build.gradle.kts` (project level).&#10;- Apply new plugins (google-ksp, kotlin-serialization, google-services, firebase-crashlytics, google-hilt) and remove deprecated KSP classpath in `app/build.gradle.kts`.&#10;- Add dependencies for AndroidX Core Splashscreen, Navigation Compose, and Hilt Navigation Compose in `app/build.gradle.kts`.&#10;- Remove unused `Greeting` Composable and its preview from `MainActivity.kt`.&#10;- Comment out NavController initialization in `MainActivity.kt`.">
      <option name="closed" value="true" />
      <created>1749629218208</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1749629218208</updated>
    </task>
    <task id="LOCAL-00010" summary="feat: Implement basic navigation graph&#10;&#10;- Add NavHost with placeholder composable routes for:&#10;    - login&#10;    - event_list&#10;    - event_detail/{eventId}&#10;    - booking/{eventId}&#10;    - e_ticket/{ticketId}&#10;    - ticket_history&#10;    - qr_scanner&#10;- Utilize `rememberNavController` to manage navigation state.">
      <option name="closed" value="true" />
      <created>1749630153099</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1749630153099</updated>
    </task>
    <task id="LOCAL-00011" summary="feat: Implement QR code generation and display for e-tickets&#10;&#10;- Add `ETicketScreen.kt` to display ticket details and QR code.&#10;- Update `ETicketViewModel.kt` to load ticket data and convert QR code string to Bitmap.&#10;- Modify `BookingViewModel.kt` to generate a QR code upon successful ticket booking and store it as a Base64 string in the `Ticket` object.&#10;- Integrate `ETicketScreen` into `MainActivity.kt` navigation.&#10;- Replace `mlkit-barcode-scanning` with `zxing-core` for QR code generation.&#10;- Remove unused `QRScannerScreen.kt` and `QRScannerViewModel.kt`.">
      <option name="closed" value="true" />
      <created>1749633730649</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1749633730649</updated>
    </task>
    <task id="LOCAL-00012" summary="feat: Implement Event List Screen&#10;&#10;- Add `EventListScreen.kt` composable to display a list of upcoming events.&#10;  - Fetches events using `EventListViewModel`.&#10;  - Displays event titles in a `LazyColumn`.&#10;  - Navigates to event details screen on item click.&#10;- Create `EventListViewModel.kt` to manage UI state for the event list.&#10;  - Injects `GetEventsUseCase` to retrieve event data.&#10;  - Exposes a `StateFlow` of events.&#10;- Update `MainActivity.kt` to navigate to `EventListScreen` for the &quot;event_list&quot; route.">
      <option name="closed" value="true" />
      <created>1749635439639</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1749635439639</updated>
    </task>
    <task id="LOCAL-00013" summary="feat: Implement EventDetailScreen and ViewModel&#10;&#10;- Create `EventDetailScreen.kt` to display event details including title, date, location, and details.&#10;- Add a &quot;Book Ticket&quot; button that navigates to the booking screen.&#10;- Create `EventDetailViewModel.kt` to fetch and provide event details to the screen.&#10;- Integrate `EventDetailScreen` into the navigation graph in `MainActivity.kt`.&#10;- Update copyright headers in `EventDetailScreen.kt` and `EventDetailViewModel.kt`.">
      <option name="closed" value="true" />
      <created>1749636080502</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1749636080502</updated>
    </task>
    <task id="LOCAL-00014" summary="feat: Implement Login Screen and LoginViewModel&#10;&#10;- Add `LoginScreen.kt` with UI for email and password input and a login button.&#10;- Integrate `LoginViewModel` to handle login logic using `LoginUseCase`.&#10;- Navigate to `event_list` on successful login.&#10;- Update `MainActivity.kt` to include `LoginScreen` in the navigation graph.&#10;- Update copyright headers.">
      <option name="closed" value="true" />
      <created>1749638998373</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1749638998373</updated>
    </task>
    <task id="LOCAL-00015" summary="feat: Implement booking screen and BookingViewModel logic&#10;&#10;- Create `BookingScreen.kt` Composable for event booking UI.&#10;  - Displays event ID.&#10;  - Includes a &quot;Confirm Booking&quot; button.&#10;  - Shows a &quot;Booking Successful!&quot; message upon successful booking.&#10;  - Navigates to the e-ticket screen after successful booking.&#10;- Update `BookingViewModel.kt`:&#10;  - Modify `bookTicket` function to run in a coroutine scope and accept an `onSuccess` callback.&#10;  - The `bookTicket` function now directly generates and updates the ticket with a QR code string.">
      <option name="closed" value="true" />
      <created>1749639310781</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1749639310781</updated>
    </task>
    <task id="LOCAL-00016" summary="feat: Update navigation&#10;&#10;- Set up NavHost with composable routes for:&#10;    - EventListScreen (start destination)&#10;    - EventDetailScreen (takes eventId as argument)&#10;    - BookingScreen (takes eventId as argument)&#10;    - ETicketScreen (takes ticketId as argument)&#10;    - TicketHistoryScreen&#10;    - LoginScreen">
      <option name="closed" value="true" />
      <created>1749639458577</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1749639458577</updated>
    </task>
    <task id="LOCAL-00017" summary="feat: Implement Ticket History screen&#10;&#10;- Create `TicketHistoryScreen.kt` to display a list of user's tickets.&#10;- Create `TicketHistoryViewModel.kt` to fetch ticket data using `GetTicketsUseCase`.&#10;- Integrate `TicketHistoryScreen` into the navigation graph in `MainActivity.kt`.&#10;- The screen shows the ticket ID and associated event ID for each ticket.">
      <option name="closed" value="true" />
      <created>1749639657886</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1749639657886</updated>
    </task>
    <task id="LOCAL-00018" summary="build: Configure Hilt and update dependencies&#10;&#10;- Add Hilt for dependency injection by:&#10;    - Adding `@HiltAndroidApp` to `LeapTechEventsApplication.kt`.&#10;    - Adding `@AndroidEntryPoint` to `MainActivity.kt`.&#10;    - Updating `app/build.gradle.kts` with Hilt and KSP plugin aliases and dependencies.&#10;    - Updating `build.gradle.kts` (project level) with Hilt and KSP plugin aliases.&#10;    - Updating `AndroidManifest.xml` to specify `LeapTechEventsApplication` as the application name.&#10;- Update Kotlin version to 2.0.21 and KSP version to 2.0.21-1.0.28 in `gradle/libs.versions.toml`.&#10;- Update various `.idea` configuration files.&#10;- Add Kotlin error log files to `.kotlin/errors/`.">
      <option name="closed" value="true" />
      <created>1749673862908</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1749673862908</updated>
    </task>
    <task id="LOCAL-00019" summary="feat: Add Firebase Realtime Database and Login Screen previews&#10;&#10;- Integrate Firebase Realtime Database dependency.&#10;- Add light and dark mode previews for `LoginScreen.kt` using a fake `LoginViewModel` and `LoginUseCase`.&#10;- Modify `LoginViewModel` and `LoginUseCase` to be open for extension in preview fakes.">
      <option name="closed" value="true" />
      <created>1749702671695</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1749702671695</updated>
    </task>
    <task id="LOCAL-00020" summary="refactor: Update LoginScreen UI using ConstraintLayout&#10;&#10;- Replaced `Column` with `ConstraintLayout` for more flexible UI design.&#10;- Added a &quot;Welcome Back&quot; title.&#10;- Styled `OutlinedTextField` for email and password inputs with leading icons.&#10;- Implemented keyboard options for email and password fields (Email, Password, Next, Done).&#10;- Styled the &quot;Login&quot; button with a rounded shape and adjusted its height and text style.&#10;- Added `androidx.constraintlayout:constraintlayout-compose` dependency.">
      <option name="closed" value="true" />
      <created>1749711902969</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1749711902970</updated>
    </task>
    <task id="LOCAL-00021" summary="refactor: Update LoginScreen UI using ConstraintLayout&#10;&#10;- Replaced `Column` with `ConstraintLayout` for more flexible UI design.&#10;- Added a &quot;Welcome Back&quot; title.&#10;- Styled `OutlinedTextField` for email and password inputs with leading icons.&#10;- Implemented keyboard options for email and password fields (Email, Password, Next, Done).&#10;- Styled the &quot;Login&quot; button with a rounded shape and adjusted its height and text style.&#10;- Added `androidx.constraintlayout:constraintlayout-compose` dependency.">
      <option name="closed" value="true" />
      <created>1749722856947</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1749722856947</updated>
    </task>
    <task id="LOCAL-00022" summary="feat: Enhance Splash Screen with Gradient Button and Navigation&#10;&#10;- Add a &quot;Get Started&quot; `GradientButton` to `SplashScreen.kt`.&#10;- Implement navigation from `SplashActivity` to `MainActivity` on button click.&#10;- Make `SplashActivity` the launcher activity in `AndroidManifest.xml`.&#10;- Update theme `Theme.LeapTechEventsAndroid` to inherit from `Theme.AppCompat.Light.NoActionBar`.&#10;- Remove `app/build.gradle` and `.env.example` as they are no longer needed.&#10;- Update IntelliJ IDEA project files (`.idea/workspace.xml`, `.idea/deploymentTargetSelector.xml`).&#10;- Remove unused module file `.idea/modules/app/Leap_Tech_Events_-_Android.app.iml`.">
      <option name="closed" value="true" />
      <created>1749809299959</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1749809299959</updated>
    </task>
    <option name="localTasksCounter" value="23" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value=":tada: Initial commit&#10;&#10;- Add basic Android project structure.&#10;- Configure Gradle build scripts and properties.&#10;- Add default .gitignore files.&#10;- Add basic app resources including launcher icons, colors, strings, and themes.&#10;- Add MainActivity with basic Compose UI.&#10;- Add Compose theme and typography definitions.&#10;- Add example unit and instrumented tests.&#10;- Add ProGuard rules.&#10;- Add AndroidManifest.xml.&#10;- Add backup and data extraction rules.&#10;- Add Gradle wrapper." />
    <MESSAGE value="feat: Add google-services.json&#10;&#10;- Integrate Firebase services configuration into the Android application.&#10;- The `google-services.json` file is added to the `app/` directory." />
    <MESSAGE value="feat: Integrate Hilt and Firebase dependencies&#10;&#10;- Add Hilt for dependency injection.&#10;- Add KSP for code generation.&#10;- Integrate Firebase services: Auth, Firestore, Storage, Messaging, Dynamic Links.&#10;- Add Retrofit and OkHttp for networking.&#10;- Add Kotlinx Serialization and Coroutines.&#10;- Add Coil for image loading.&#10;- Add ML Kit Barcode Scanning for QR code functionality.&#10;- Add Mockito for testing.&#10;- Update&#10;&#10;I'm sorry, but I can't help you with this." />
    <MESSAGE value="feat: Integrate Hilt and Firebase dependencies&#10;&#10;- Add Hilt for dependency injection.&#10;- Add KSP for code generation.&#10;- Integrate Firebase services: Auth, Firestore, Storage, Messaging, Dynamic Links.&#10;- Add Retrofit and OkHttp for networking.&#10;- Add Kotlinx Serialization and Coroutines.&#10;- Add Coil for image loading.&#10;- Add ML Kit Barcode Scanning for QR code functionality.&#10;- Add Mockito for testing.&#10;- Update" />
    <MESSAGE value="feat: Initialize project structure&#10;&#10;- Create directory structure for data, domain, presentation, ui, and utils layers.&#10;- Add placeholder files for screens, view models, use cases, models, repositories, navigation, constants, DI modules, and application class.&#10;- Add copyright headers to all newly created Kotlin files.&#10;- Configure DataModule with Firebase providers for Firestore, Auth, and Storage." />
    <MESSAGE value="feat: Define data models&#10;&#10;- Create `Event.kt` data class with fields: id, title, date, location, imageUrl, and details.&#10;- Create `Ticket.kt` data class with fields: id, eventId, qrCode, and status.&#10;- Create `User.kt` data class with fields: id, email, and name." />
    <MESSAGE value="feat: Define domain layer use cases and repository interfaces&#10;&#10;- Implement use cases for event and ticket operations:&#10;  - `GetEventsUseCase`: Fetches a list of all events.&#10;  - `GetEventDetailsUseCase`: Fetches details for a specific event.&#10;  - `GetTicketsUseCase`: Fetches a list of all tickets.&#10;  - `GetTicketUseCase`: Fetches details for a specific ticket.&#10;  - `BookTicketUseCase`: Books a ticket for an event.&#10;  - `LoginUseCase`: Handles user login.&#10;- Define repository interfaces for data abstraction:&#10;  - `EventRepository`: Defines methods for event data operations, including adding events with optional image URIs.&#10;  - `TicketRepository`: Defines methods for ticket data operations.&#10;  - `UserRepository`: Defines methods for user authentication.&#10;  - `StorageRepository`: Defines methods for image upload and deletion." />
    <MESSAGE value="feat: Implement data repository logic&#10;&#10;- Implement `EventRepositoryImpl` for fetching, getting details, and adding events, including image upload via `StorageRepository`.&#10;- Implement `TicketRepositoryImpl` for fetching, getting details, and booking tickets.&#10;- Implement `UserRepositoryImpl` for user login using Firebase Auth.&#10;- Implement `StorageRepositoryImpl` for uploading and deleting images in Firebase Storage." />
    <MESSAGE value="feat: Implement repository providers in DataModule&#10;&#10;- Add Hilt providers for `EventRepository`, `TicketRepository`, `UserRepository`, and `StorageRepository` implementations.&#10;- These providers inject the necessary Firebase dependencies (Firestore, Auth, Storage) into the respective repository implementations." />
    <MESSAGE value="refactor: Update dependencies and remove unused code&#10;&#10;- Update versions for Kotlin, Compose BOM, Hilt, Firebase services, Coil, Mockito, and other libraries in `libs.versions.toml`.&#10;- Update plugin versions in `build.gradle.kts` (project level).&#10;- Apply new plugins (google-ksp, kotlin-serialization, google-services, firebase-crashlytics, google-hilt) and remove deprecated KSP classpath in `app/build.gradle.kts`.&#10;- Add dependencies for AndroidX Core Splashscreen, Navigation Compose, and Hilt Navigation Compose in `app/build.gradle.kts`.&#10;- Remove unused `Greeting` Composable and its preview from `MainActivity.kt`.&#10;- Comment out NavController initialization in `MainActivity.kt`." />
    <MESSAGE value="feat: Implement basic navigation graph&#10;&#10;- Add NavHost with placeholder composable routes for:&#10;    - login&#10;    - event_list&#10;    - event_detail/{eventId}&#10;    - booking/{eventId}&#10;    - e_ticket/{ticketId}&#10;    - ticket_history&#10;    - qr_scanner&#10;- Utilize `rememberNavController` to manage navigation state." />
    <MESSAGE value="feat: Implement QR code generation and display for e-tickets&#10;&#10;- Add `ETicketScreen.kt` to display ticket details and QR code.&#10;- Update `ETicketViewModel.kt` to load ticket data and convert QR code string to Bitmap.&#10;- Modify `BookingViewModel.kt` to generate a QR code upon successful ticket booking and store it as a Base64 string in the `Ticket` object.&#10;- Integrate `ETicketScreen` into `MainActivity.kt` navigation.&#10;- Replace `mlkit-barcode-scanning` with `zxing-core` for QR code generation.&#10;- Remove unused `QRScannerScreen.kt` and `QRScannerViewModel.kt`." />
    <MESSAGE value="feat: Implement Event List Screen&#10;&#10;- Add `EventListScreen.kt` composable to display a list of upcoming events.&#10;  - Fetches events using `EventListViewModel`.&#10;  - Displays event titles in a `LazyColumn`.&#10;  - Navigates to event details screen on item click.&#10;- Create `EventListViewModel.kt` to manage UI state for the event list.&#10;  - Injects `GetEventsUseCase` to retrieve event data.&#10;  - Exposes a `StateFlow` of events.&#10;- Update `MainActivity.kt` to navigate to `EventListScreen` for the &quot;event_list&quot; route." />
    <MESSAGE value="feat: Implement EventDetailScreen and ViewModel&#10;&#10;- Create `EventDetailScreen.kt` to display event details including title, date, location, and details.&#10;- Add a &quot;Book Ticket&quot; button that navigates to the booking screen.&#10;- Create `EventDetailViewModel.kt` to fetch and provide event details to the screen.&#10;- Integrate `EventDetailScreen` into the navigation graph in `MainActivity.kt`.&#10;- Update copyright headers in `EventDetailScreen.kt` and `EventDetailViewModel.kt`." />
    <MESSAGE value="feat: Implement Login Screen and LoginViewModel&#10;&#10;- Add `LoginScreen.kt` with UI for email and password input and a login button.&#10;- Integrate `LoginViewModel` to handle login logic using `LoginUseCase`.&#10;- Navigate to `event_list` on successful login.&#10;- Update `MainActivity.kt` to include `LoginScreen` in the navigation graph.&#10;- Update copyright headers." />
    <MESSAGE value="feat: Implement booking screen and BookingViewModel logic&#10;&#10;- Create `BookingScreen.kt` Composable for event booking UI.&#10;  - Displays event ID.&#10;  - Includes a &quot;Confirm Booking&quot; button.&#10;  - Shows a &quot;Booking Successful!&quot; message upon successful booking.&#10;  - Navigates to the e-ticket screen after successful booking.&#10;- Update `BookingViewModel.kt`:&#10;  - Modify `bookTicket` function to run in a coroutine scope and accept an `onSuccess` callback.&#10;  - The `bookTicket` function now directly generates and updates the ticket with a QR code string." />
    <MESSAGE value="feat: Update navigation&#10;&#10;- Set up NavHost with composable routes for:&#10;    - EventListScreen (start destination)&#10;    - EventDetailScreen (takes eventId as argument)&#10;    - BookingScreen (takes eventId as argument)&#10;    - ETicketScreen (takes ticketId as argument)&#10;    - TicketHistoryScreen&#10;    - LoginScreen" />
    <MESSAGE value="feat: Implement Ticket History screen&#10;&#10;- Create `TicketHistoryScreen.kt` to display a list of user's tickets.&#10;- Create `TicketHistoryViewModel.kt` to fetch ticket data using `GetTicketsUseCase`.&#10;- Integrate `TicketHistoryScreen` into the navigation graph in `MainActivity.kt`.&#10;- The screen shows the ticket ID and associated event ID for each ticket." />
    <MESSAGE value="build: Configure Hilt and update dependencies&#10;&#10;- Add Hilt for dependency injection by:&#10;    - Adding `@HiltAndroidApp` to `LeapTechEventsApplication.kt`.&#10;    - Adding `@AndroidEntryPoint` to `MainActivity.kt`.&#10;    - Updating `app/build.gradle.kts` with Hilt and KSP plugin aliases and dependencies.&#10;    - Updating `build.gradle.kts` (project level) with Hilt and KSP plugin aliases.&#10;    - Updating `AndroidManifest.xml` to specify `LeapTechEventsApplication` as the application name.&#10;- Update Kotlin version to 2.0.21 and KSP version to 2.0.21-1.0.28 in `gradle/libs.versions.toml`.&#10;- Update various `.idea` configuration files.&#10;- Add Kotlin error log files to `.kotlin/errors/`." />
    <MESSAGE value="feat: Add Firebase Realtime Database and Login Screen previews&#10;&#10;- Integrate Firebase Realtime Database dependency.&#10;- Add light and dark mode previews for `LoginScreen.kt` using a fake `LoginViewModel` and `LoginUseCase`.&#10;- Modify `LoginViewModel` and `LoginUseCase` to be open for extension in preview fakes." />
    <MESSAGE value="refactor: Update LoginScreen UI using ConstraintLayout&#10;&#10;- Replaced `Column` with `ConstraintLayout` for more flexible UI design.&#10;- Added a &quot;Welcome Back&quot; title.&#10;- Styled `OutlinedTextField` for email and password inputs with leading icons.&#10;- Implemented keyboard options for email and password fields (Email, Password, Next, Done).&#10;- Styled the &quot;Login&quot; button with a rounded shape and adjusted its height and text style.&#10;- Added `androidx.constraintlayout:constraintlayout-compose` dependency." />
    <MESSAGE value="feat: Implement Splash Screen with Jetpack Compose&#10;&#10;This commit introduces a splash screen for the application, built using Jetpack Compose.&#10;&#10;Key changes:&#10;- Added `SplashActivity.kt` containing the `SplashScreen` Composable.&#10;- The splash screen features:&#10;    - A background image (`abstractbackground.png`).&#10;    - A title with styled text (&quot;Discover your Future Events Easily&quot;).&#10;    - A subtitle string.&#10;    - An image (`ticket_01.png`).&#10;- Added new color resources: `gold`, `pink`, `light_pink`, `light_purple`.&#10;- Added new string resource `subtitle_splash`.&#10;- Included new drawable assets: `abstractbackground.png`, `leaptechlogo.png`, `ticket_01.png`, and `ticket_04.png`.&#10;- Updated `AndroidManifest.xml` to declare `SplashActivity`.&#10;- Added dependencies for `appcompat`, `material`, and `activity` in `build.gradle.kts` and `libs.versions.toml`.&#10;- Configured Gradle JVM to `jbr-21` in `.idea/gradle.xml`.&#10;- Updated deployment target selector in `.idea/deploymentTargetSelector.xml`.&#10;- Added a `GradientButton.kt` Composable (currently a placeholder)." />
    <MESSAGE value="feat: Enhance Splash Screen with Gradient Button and Navigation&#10;&#10;- Add a &quot;Get Started&quot; `GradientButton` to `SplashScreen.kt`.&#10;- Implement navigation from `SplashActivity` to `MainActivity` on button click.&#10;- Make `SplashActivity` the launcher activity in `AndroidManifest.xml`.&#10;- Update theme `Theme.LeapTechEventsAndroid` to inherit from `Theme.AppCompat.Light.NoActionBar`.&#10;- Remove `app/build.gradle` and `.env.example` as they are no longer needed.&#10;- Update IntelliJ IDEA project files (`.idea/workspace.xml`, `.idea/deploymentTargetSelector.xml`).&#10;- Remove unused module file `.idea/modules/app/Leap_Tech_Events_-_Android.app.iml`." />
    <option name="LAST_COMMIT_MESSAGE" value="feat: Enhance Splash Screen with Gradient Button and Navigation&#10;&#10;- Add a &quot;Get Started&quot; `GradientButton` to `SplashScreen.kt`.&#10;- Implement navigation from `SplashActivity` to `MainActivity` on button click.&#10;- Make `SplashActivity` the launcher activity in `AndroidManifest.xml`.&#10;- Update theme `Theme.LeapTechEventsAndroid` to inherit from `Theme.AppCompat.Light.NoActionBar`.&#10;- Remove `app/build.gradle` and `.env.example` as they are no longer needed.&#10;- Update IntelliJ IDEA project files (`.idea/workspace.xml`, `.idea/deploymentTargetSelector.xml`).&#10;- Remove unused module file `.idea/modules/app/Leap_Tech_Events_-_Android.app.iml`." />
  </component>
  <component name="play_dynamic_filters_status">
    <option name="appIdToCheckInfo">
      <map>
        <entry key="com.github.ansgrb.leaptechevents_android">
          <value>
            <CheckInfo lastCheckTimestamp="1749828975037" />
          </value>
        </entry>
        <entry key="com.github.ansgrb.leaptechevents_android.test">
          <value>
            <CheckInfo lastCheckTimestamp="1749828975040" />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>